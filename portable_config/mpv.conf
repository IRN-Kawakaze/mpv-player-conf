######## 按键设置 ########

# 禁用默认按键绑定
no-input-default-bindings


######## 播放设置 ########

# 开启列表循环
loop-playlist=inf

# 播放结束后不退出
keep-open=yes

# 设置初始窗口的最小大小
# 格式：宽x高，纯数字代表像素，带百分号代表相对屏幕像素的百分比
# 该选项不会改变窗口的纵横比
autofit-smaller=50%x50%

# 设置 OSD 字体大小
# 该单位表示在窗口高度为 720 时的缩放像素大小，实际像素大小会根据窗口高度进行缩放。
# 如果窗口高度大于 720，文本的实际大小会增大。
# 如果窗口高度小于 720，文本的实际大小会减小。
# （这个值会影响播放列表的字体大小，播放列表字太小看不清则需要调大，播放列表字太大占满屏幕则需要调小）
# 默认值：30
osd-font-size=20

#### 设置项之间有依赖关系-00-起始 ####

# 自动创建播放列表
# no：加载单个文件。（默认值）
# filter：从父目录创建一个播放列表，添加与 --directory-filter-types 指定的文件种类匹配的文件。
# same：从父目录中创建一个播放列表，添加与当前加载文件种类相同的文件，
# 根据输入文件选择一个 *-exts，并且只将扩展名匹配的文件添加到播放列表中，
# 如果输入文件本身与任何扩展名列表都不匹配，则不会自动生成播放列表。
# （人话：same 只根据最初播放文件的后缀名判断文件种类，并将同一目录内的同类文件加入播放列表，比如播放 .mkv 后缀的文件就添加所有视频文件后缀的文件。它只关心后缀名，不会考虑文件的实际类型。）
autocreate-playlist=same

# 自动创建播放列表的 filter 模式会添加哪些种类的文件到播放列表
# 默认值：video,audio,image,archive,playlist。
directory-filter-types=audio,video

# 自动创建播放列表时如何处理子目录
# auto：启用 --shuffle 时行为类似 recursive，否则行为类似 lazy。（默认值）
# lazy：添加所有子目录到播放列表，不展开子目录，只显示子目录名称，播放到该子目录才改为显示子目录内符合条件的文件名。
# recursive：添加所有子目录内的文件到播放列表，即默认展开所有子目录。
# ignore：忽略子目录，即不添加子目录（内的文件）到播放列表。
directory-mode=ignore

#### 设置项之间有依赖关系-00-结束 ####


######## 缓存设置 ########

# 是否启用缓存（进度条缓冲区）
# yes：如果启用，则缓存大小最多可使用 --cache-secs（但仍受 --demuxer-max-bytes 限制），并使缓存数据可被跳转（如果可能）。
# no：如果禁用，则 --cache-pause 及相关功能将被隐式禁用。
# auto：根据流是否涉及网络或其他较慢的存储介质来决定是否启用缓存（该判断方法并不完全准确）。
# 默认值：auto
cache=yes

#### 设置项之间有依赖关系-01-起始 ####

# 以下几个缓存选项启用任意一个都有可能会产生缓存文件（夹）

# 将数据写入临时文件，而非保留在内存
cache-on-disk=no

# 在缓存目录中存储和加载已编译的 GLSL 着色器
# 通常，着色器编译速度非常快，因此一般不需要它。
# 它主要涉及 GLSL 到 SPIR-V 的转换，例如：D3D11、ANGLE 或 Vulkan，以及一些其他专有驱动程序。在这些平台上启用此功能可以提高启动性能。
# 在使用 --vo=gpu-next 时，如果缓存大小超出 128 MiB，最近 24 小时内未访问的文件可能会被清理。
# 在使用 --vo=gpu 时，缓存不会被自动清理，因此旧的、未使用的缓存文件可能会一直保留。
# 默认值：yes
gpu-shader-cache=no

# 在缓存目录中存储和加载由 ICC 配置文件创建的 3D LUT
# 这可以用于加快加载速度，因为 LittleCMS 2 在创建 3D LUT 时可能需要较长时间。
# 在使用 --vo=gpu-next 时，如果缓存大小超出 1.5 GiB，最近 24 小时内未访问的文件可能会被清理。
# 在使用 --vo=gpu 时，缓存不会被自动清理，因此旧的、未使用的缓存文件可能会一直保留。
# 默认值：yes
icc-cache=no

#### 设置项之间有依赖关系-01-结束 ####


######## 字幕设置 ########

# 自动挂载字幕文件
# no：不自动挂载字幕文件。
# exact：自动挂载有字幕文件扩展名和（或）有语言后缀的文件。（默认值）
# fuzzy：自动挂载所有包含媒体文件名的字幕文件。
# all：自动挂载当前目录和 --sub-file-paths 目录中的所有子文件。 
sub-auto=fuzzy


######## 视频设置 ########

# 指定要使用的视频输出驱动程序的优先级列表
# 默认值：gpu
vo=gpu

# 选择硬件解码器
# 可选参数及各平台可用的硬件解码器：https://mpv.io/manual/master/#options-hwdec
# no：禁用硬件解码器。（默认值）
# auto：强制启用任何找到的硬件解码器。
# auto-safe：启用白名单里的硬件解码器。
# auto-copy：启用带有 copy-back 功能的最佳硬件解码器。
# nvdec-copy：使用 nvdec-copy 硬解。
hwdec=no

# 选择预设 profile
# 预设内容见：https://github.com/mpv-player/mpv/blob/master/etc/builtin.conf
# 新版本里 gpu-hq 是 high-quality 的别名
profile=high-quality

# 自动色彩管理
icc-profile-auto

# 将字幕渲染进视频同步处理
blend-subtitles=video

# GPU 渲染器选项-画面拉伸算法
scale=ewa_lanczossharp

#### 设置项之间有依赖关系-02-起始 ####

# 插/补帧
# 这实质上是尝试通过沿时间轴卷积视频来对丢失的帧进行插值。可以使用 --tscale 设置来控制所使用的过滤器。
# 警告，这需要将 --video-sync 选项设置为 -display-* ，否则它将被静默禁用。在 mpv 0.14.0 之前不需要。
interpolation

# 插/补帧的过滤器
# 最平滑最模糊的是 bicubic，最不平滑最锐利的是 oversample。（越平滑越模糊，涂抹感越强）
tscale=oversample


# 音视频同步模式
# audio：将视频帧与音频同步。这是最可靠的模式，因为播放器无需假设显示器的行为。缺点是它可能导致偶尔的帧丢失或重复。如果禁用了音频，则使用系统时钟。（默认值）
# display-resample：重新采样音频以匹配视频。此模式还将尝试调整音频速度以补偿其他漂移（这意味着它会不时地以不同的速度播放音频，以减少 A/V 差异）。
# display-resample-vdrop：重新采样音频以匹配视频。丢弃视频帧以补偿漂移。
# display-resample-desync：重新采样音频以匹配视频。但是没有 A/V 补偿。
# display-vdrop：删除或重复视频帧以补偿不同步的视频（尽管它应该具有与 audio 模式相同的效果，但实现方式却有很大不同）。
# display-adrop：删除或重复音频数据以补偿不同步的视频。请参阅 --video-sync-adrop-size （需配合使用）。如果实际监视器的刷新率与报告的或强制的率差异太大，则此模式将导致严重的音频失真。
# display-desync：将视频与显示器同步，并让音频自行播放。
# desync：将视频与系统时钟同步，并让音频自行播放。
video-sync=auto

#### 设置项之间有依赖关系-02-结束 ####


######## 音频设置 ########

# 音频输出设备
ao=wasapi

# 强制双声道
audio-channels=stereo

